/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FileMetaDto,
    FileMetaDtoFromJSON,
    FileMetaDtoToJSON,
    FileStructureDto,
    FileStructureDtoFromJSON,
    FileStructureDtoToJSON,
} from '../models';

export interface CourseFilesControllerGetFileRequest {
    projectKey: string;
    productKey: string;
    b64Path: string;
}

export interface CourseFilesControllerGetMarkdownFileAsHtmlRequest {
    projectKey: string;
    productKey: string;
    markdownB64Path: string;
}

export interface CourseFilesControllerListProjectFilesRequest {
    projectKey: string;
    productKey: string;
}

export interface OpenCourseFilesControllerGetFileRequest {
    projectKey: string;
    b64Path: string;
    productKey: string;
}

export interface OpenCourseFilesControllerGetMarkdownFileAsHtmlRequest {
    projectKey: string;
    markdownB64Path: string;
    productKey: string;
}

export interface OpenCourseFilesControllerGetNearestHtmlReadmeForFileRequest {
    projectKey: string;
    b64Path: string;
    productKey: string;
}

/**
 * ProjectFilesApi - interface
 * 
 * @export
 * @interface ProjectFilesApiInterface
 */
export interface ProjectFilesApiInterface {
    /**
     * 
     * @param {string} projectKey 
     * @param {string} productKey 
     * @param {string} b64Path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectFilesApiInterface
     */
    courseFilesControllerGetFileRaw(requestParameters: CourseFilesControllerGetFileRequest): Promise<runtime.ApiResponse<FileMetaDto>>;

    /**
     */
    courseFilesControllerGetFile(requestParameters: CourseFilesControllerGetFileRequest): Promise<FileMetaDto>;

    /**
     * 
     * @param {string} projectKey 
     * @param {string} productKey 
     * @param {string} markdownB64Path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectFilesApiInterface
     */
    courseFilesControllerGetMarkdownFileAsHtmlRaw(requestParameters: CourseFilesControllerGetMarkdownFileAsHtmlRequest): Promise<runtime.ApiResponse<FileMetaDto>>;

    /**
     */
    courseFilesControllerGetMarkdownFileAsHtml(requestParameters: CourseFilesControllerGetMarkdownFileAsHtmlRequest): Promise<FileMetaDto>;

    /**
     * 
     * @param {string} projectKey 
     * @param {string} productKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectFilesApiInterface
     */
    courseFilesControllerListProjectFilesRaw(requestParameters: CourseFilesControllerListProjectFilesRequest): Promise<runtime.ApiResponse<FileStructureDto>>;

    /**
     */
    courseFilesControllerListProjectFiles(requestParameters: CourseFilesControllerListProjectFilesRequest): Promise<FileStructureDto>;

    /**
     * 
     * @param {string} projectKey 
     * @param {string} b64Path 
     * @param {string} productKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectFilesApiInterface
     */
    openCourseFilesControllerGetFileRaw(requestParameters: OpenCourseFilesControllerGetFileRequest): Promise<runtime.ApiResponse<FileMetaDto>>;

    /**
     */
    openCourseFilesControllerGetFile(requestParameters: OpenCourseFilesControllerGetFileRequest): Promise<FileMetaDto>;

    /**
     * 
     * @param {string} projectKey 
     * @param {string} markdownB64Path 
     * @param {string} productKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectFilesApiInterface
     */
    openCourseFilesControllerGetMarkdownFileAsHtmlRaw(requestParameters: OpenCourseFilesControllerGetMarkdownFileAsHtmlRequest): Promise<runtime.ApiResponse<FileMetaDto>>;

    /**
     */
    openCourseFilesControllerGetMarkdownFileAsHtml(requestParameters: OpenCourseFilesControllerGetMarkdownFileAsHtmlRequest): Promise<FileMetaDto>;

    /**
     * 
     * @param {string} projectKey 
     * @param {string} b64Path 
     * @param {string} productKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectFilesApiInterface
     */
    openCourseFilesControllerGetNearestHtmlReadmeForFileRaw(requestParameters: OpenCourseFilesControllerGetNearestHtmlReadmeForFileRequest): Promise<runtime.ApiResponse<FileMetaDto>>;

    /**
     */
    openCourseFilesControllerGetNearestHtmlReadmeForFile(requestParameters: OpenCourseFilesControllerGetNearestHtmlReadmeForFileRequest): Promise<FileMetaDto>;

}

/**
 * 
 */
export class ProjectFilesApi extends runtime.BaseAPI implements ProjectFilesApiInterface {

    /**
     */
    async courseFilesControllerGetFileRaw(requestParameters: CourseFilesControllerGetFileRequest): Promise<runtime.ApiResponse<FileMetaDto>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling courseFilesControllerGetFile.');
        }

        if (requestParameters.productKey === null || requestParameters.productKey === undefined) {
            throw new runtime.RequiredError('productKey','Required parameter requestParameters.productKey was null or undefined when calling courseFilesControllerGetFile.');
        }

        if (requestParameters.b64Path === null || requestParameters.b64Path === undefined) {
            throw new runtime.RequiredError('b64Path','Required parameter requestParameters.b64Path was null or undefined when calling courseFilesControllerGetFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project-files/{productKey}/{projectKey}/contents/{b64Path}`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"productKey"}}`, encodeURIComponent(String(requestParameters.productKey))).replace(`{${"b64Path"}}`, encodeURIComponent(String(requestParameters.b64Path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileMetaDtoFromJSON(jsonValue));
    }

    /**
     */
    async courseFilesControllerGetFile(requestParameters: CourseFilesControllerGetFileRequest): Promise<FileMetaDto> {
        const response = await this.courseFilesControllerGetFileRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async courseFilesControllerGetMarkdownFileAsHtmlRaw(requestParameters: CourseFilesControllerGetMarkdownFileAsHtmlRequest): Promise<runtime.ApiResponse<FileMetaDto>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling courseFilesControllerGetMarkdownFileAsHtml.');
        }

        if (requestParameters.productKey === null || requestParameters.productKey === undefined) {
            throw new runtime.RequiredError('productKey','Required parameter requestParameters.productKey was null or undefined when calling courseFilesControllerGetMarkdownFileAsHtml.');
        }

        if (requestParameters.markdownB64Path === null || requestParameters.markdownB64Path === undefined) {
            throw new runtime.RequiredError('markdownB64Path','Required parameter requestParameters.markdownB64Path was null or undefined when calling courseFilesControllerGetMarkdownFileAsHtml.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project-files/{productKey}/{projectKey}/contents-markdown/{markdownB64Path}`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"productKey"}}`, encodeURIComponent(String(requestParameters.productKey))).replace(`{${"markdownB64Path"}}`, encodeURIComponent(String(requestParameters.markdownB64Path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileMetaDtoFromJSON(jsonValue));
    }

    /**
     */
    async courseFilesControllerGetMarkdownFileAsHtml(requestParameters: CourseFilesControllerGetMarkdownFileAsHtmlRequest): Promise<FileMetaDto> {
        const response = await this.courseFilesControllerGetMarkdownFileAsHtmlRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async courseFilesControllerListProjectFilesRaw(requestParameters: CourseFilesControllerListProjectFilesRequest): Promise<runtime.ApiResponse<FileStructureDto>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling courseFilesControllerListProjectFiles.');
        }

        if (requestParameters.productKey === null || requestParameters.productKey === undefined) {
            throw new runtime.RequiredError('productKey','Required parameter requestParameters.productKey was null or undefined when calling courseFilesControllerListProjectFiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-files/{productKey}/{projectKey}`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"productKey"}}`, encodeURIComponent(String(requestParameters.productKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileStructureDtoFromJSON(jsonValue));
    }

    /**
     */
    async courseFilesControllerListProjectFiles(requestParameters: CourseFilesControllerListProjectFilesRequest): Promise<FileStructureDto> {
        const response = await this.courseFilesControllerListProjectFilesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async openCourseFilesControllerGetFileRaw(requestParameters: OpenCourseFilesControllerGetFileRequest): Promise<runtime.ApiResponse<FileMetaDto>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling openCourseFilesControllerGetFile.');
        }

        if (requestParameters.b64Path === null || requestParameters.b64Path === undefined) {
            throw new runtime.RequiredError('b64Path','Required parameter requestParameters.b64Path was null or undefined when calling openCourseFilesControllerGetFile.');
        }

        if (requestParameters.productKey === null || requestParameters.productKey === undefined) {
            throw new runtime.RequiredError('productKey','Required parameter requestParameters.productKey was null or undefined when calling openCourseFilesControllerGetFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-files/{productKey}/open/{projectKey}/contents/{b64Path}`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"b64Path"}}`, encodeURIComponent(String(requestParameters.b64Path))).replace(`{${"productKey"}}`, encodeURIComponent(String(requestParameters.productKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileMetaDtoFromJSON(jsonValue));
    }

    /**
     */
    async openCourseFilesControllerGetFile(requestParameters: OpenCourseFilesControllerGetFileRequest): Promise<FileMetaDto> {
        const response = await this.openCourseFilesControllerGetFileRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async openCourseFilesControllerGetMarkdownFileAsHtmlRaw(requestParameters: OpenCourseFilesControllerGetMarkdownFileAsHtmlRequest): Promise<runtime.ApiResponse<FileMetaDto>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling openCourseFilesControllerGetMarkdownFileAsHtml.');
        }

        if (requestParameters.markdownB64Path === null || requestParameters.markdownB64Path === undefined) {
            throw new runtime.RequiredError('markdownB64Path','Required parameter requestParameters.markdownB64Path was null or undefined when calling openCourseFilesControllerGetMarkdownFileAsHtml.');
        }

        if (requestParameters.productKey === null || requestParameters.productKey === undefined) {
            throw new runtime.RequiredError('productKey','Required parameter requestParameters.productKey was null or undefined when calling openCourseFilesControllerGetMarkdownFileAsHtml.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-files/{productKey}/open/{projectKey}/contents-markdown/{markdownB64Path}`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"markdownB64Path"}}`, encodeURIComponent(String(requestParameters.markdownB64Path))).replace(`{${"productKey"}}`, encodeURIComponent(String(requestParameters.productKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileMetaDtoFromJSON(jsonValue));
    }

    /**
     */
    async openCourseFilesControllerGetMarkdownFileAsHtml(requestParameters: OpenCourseFilesControllerGetMarkdownFileAsHtmlRequest): Promise<FileMetaDto> {
        const response = await this.openCourseFilesControllerGetMarkdownFileAsHtmlRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async openCourseFilesControllerGetNearestHtmlReadmeForFileRaw(requestParameters: OpenCourseFilesControllerGetNearestHtmlReadmeForFileRequest): Promise<runtime.ApiResponse<FileMetaDto>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling openCourseFilesControllerGetNearestHtmlReadmeForFile.');
        }

        if (requestParameters.b64Path === null || requestParameters.b64Path === undefined) {
            throw new runtime.RequiredError('b64Path','Required parameter requestParameters.b64Path was null or undefined when calling openCourseFilesControllerGetNearestHtmlReadmeForFile.');
        }

        if (requestParameters.productKey === null || requestParameters.productKey === undefined) {
            throw new runtime.RequiredError('productKey','Required parameter requestParameters.productKey was null or undefined when calling openCourseFilesControllerGetNearestHtmlReadmeForFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-files/{productKey}/open/{projectKey}/nearest-readme/{b64Path}`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"b64Path"}}`, encodeURIComponent(String(requestParameters.b64Path))).replace(`{${"productKey"}}`, encodeURIComponent(String(requestParameters.productKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileMetaDtoFromJSON(jsonValue));
    }

    /**
     */
    async openCourseFilesControllerGetNearestHtmlReadmeForFile(requestParameters: OpenCourseFilesControllerGetNearestHtmlReadmeForFileRequest): Promise<FileMetaDto> {
        const response = await this.openCourseFilesControllerGetNearestHtmlReadmeForFileRaw(requestParameters);
        return await response.value();
    }

}
