/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BooleanResult,
    BooleanResultFromJSON,
    BooleanResultToJSON,
    HealthResponse,
    HealthResponseFromJSON,
    HealthResponseToJSON,
    OrganisationSubscriptionRecord,
    OrganisationSubscriptionRecordFromJSON,
    OrganisationSubscriptionRecordToJSON,
    PaymentSessionReference,
    PaymentSessionReferenceFromJSON,
    PaymentSessionReferenceToJSON,
    QueueItemDto,
    QueueItemDtoFromJSON,
    QueueItemDtoToJSON,
    SaveOrganisationSubscriptionRecordDto,
    SaveOrganisationSubscriptionRecordDtoFromJSON,
    SaveOrganisationSubscriptionRecordDtoToJSON,
    StripeCheckoutEvent,
    StripeCheckoutEventFromJSON,
    StripeCheckoutEventToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface OrganisationSubscriptionsControllerAddSubscriptionRequest {
    orgUuid: string;
    saveOrganisationSubscriptionRecordDto: SaveOrganisationSubscriptionRecordDto;
}

export interface OrganisationSubscriptionsControllerDeleteSubscriptionRequest {
    orgUuid: string;
    uuid: string;
}

export interface StripeEventsControllerGetLastEventsRequest {
    skip: number;
    take: number;
}

/**
 * SuperPowerApi - interface
 * 
 * @export
 * @interface SuperPowerApiInterface
 */
export interface SuperPowerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    allSubscriptionsControllerFindAllRaw(): Promise<runtime.ApiResponse<Array<OrganisationSubscriptionRecord>>>;

    /**
     */
    allSubscriptionsControllerFindAll(): Promise<Array<OrganisationSubscriptionRecord>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    appControllerGetHelloSuperAdminRaw(): Promise<runtime.ApiResponse<HealthResponse>>;

    /**
     */
    appControllerGetHelloSuperAdmin(): Promise<HealthResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    emailClientControllerPeekFailedQueueJobsRaw(): Promise<runtime.ApiResponse<Array<QueueItemDto>>>;

    /**
     */
    emailClientControllerPeekFailedQueueJobs(): Promise<Array<QueueItemDto>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    emailClientControllerPeekQueueJobsRaw(): Promise<runtime.ApiResponse<Array<QueueItemDto>>>;

    /**
     */
    emailClientControllerPeekQueueJobs(): Promise<Array<QueueItemDto>>;

    /**
     * 
     * @param {string} orgUuid 
     * @param {SaveOrganisationSubscriptionRecordDto} saveOrganisationSubscriptionRecordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    organisationSubscriptionsControllerAddSubscriptionRaw(requestParameters: OrganisationSubscriptionsControllerAddSubscriptionRequest): Promise<runtime.ApiResponse<Array<OrganisationSubscriptionRecord>>>;

    /**
     */
    organisationSubscriptionsControllerAddSubscription(requestParameters: OrganisationSubscriptionsControllerAddSubscriptionRequest): Promise<Array<OrganisationSubscriptionRecord>>;

    /**
     * 
     * @param {string} orgUuid 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    organisationSubscriptionsControllerDeleteSubscriptionRaw(requestParameters: OrganisationSubscriptionsControllerDeleteSubscriptionRequest): Promise<runtime.ApiResponse<BooleanResult>>;

    /**
     */
    organisationSubscriptionsControllerDeleteSubscription(requestParameters: OrganisationSubscriptionsControllerDeleteSubscriptionRequest): Promise<BooleanResult>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    paymentSessionReferenceControllerFindAllRaw(): Promise<runtime.ApiResponse<Array<PaymentSessionReference>>>;

    /**
     */
    paymentSessionReferenceControllerFindAll(): Promise<Array<PaymentSessionReference>>;

    /**
     * 
     * @param {number} skip 
     * @param {number} take 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    stripeEventsControllerGetLastEventsRaw(requestParameters: StripeEventsControllerGetLastEventsRequest): Promise<runtime.ApiResponse<Array<StripeCheckoutEvent>>>;

    /**
     */
    stripeEventsControllerGetLastEvents(requestParameters: StripeEventsControllerGetLastEventsRequest): Promise<Array<StripeCheckoutEvent>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    stripeWebhookControllerPeekFailedQueueJobsRaw(): Promise<runtime.ApiResponse<Array<QueueItemDto>>>;

    /**
     */
    stripeWebhookControllerPeekFailedQueueJobs(): Promise<Array<QueueItemDto>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    stripeWebhookControllerPeekQueueJobsRaw(): Promise<runtime.ApiResponse<Array<QueueItemDto>>>;

    /**
     */
    stripeWebhookControllerPeekQueueJobs(): Promise<Array<QueueItemDto>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    superPowersControllerResetDatabaseRaw(): Promise<runtime.ApiResponse<void>>;

    /**
     */
    superPowersControllerResetDatabase(): Promise<void>;

    /**
     * 
     * @summary Get all users in the system. Limited to Super Admin role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperPowerApiInterface
     */
    userControllerFindAllRaw(): Promise<runtime.ApiResponse<Array<User>>>;

    /**
     * Get all users in the system. Limited to Super Admin role.
     */
    userControllerFindAll(): Promise<Array<User>>;

}

/**
 * 
 */
export class SuperPowerApi extends runtime.BaseAPI implements SuperPowerApiInterface {

    /**
     */
    async allSubscriptionsControllerFindAllRaw(): Promise<runtime.ApiResponse<Array<OrganisationSubscriptionRecord>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationSubscriptionRecordFromJSON));
    }

    /**
     */
    async allSubscriptionsControllerFindAll(): Promise<Array<OrganisationSubscriptionRecord>> {
        const response = await this.allSubscriptionsControllerFindAllRaw();
        return await response.value();
    }

    /**
     */
    async appControllerGetHelloSuperAdminRaw(): Promise<runtime.ApiResponse<HealthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/is-super-admin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthResponseFromJSON(jsonValue));
    }

    /**
     */
    async appControllerGetHelloSuperAdmin(): Promise<HealthResponse> {
        const response = await this.appControllerGetHelloSuperAdminRaw();
        return await response.value();
    }

    /**
     */
    async emailClientControllerPeekFailedQueueJobsRaw(): Promise<runtime.ApiResponse<Array<QueueItemDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/email-client/peekfailedjobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QueueItemDtoFromJSON));
    }

    /**
     */
    async emailClientControllerPeekFailedQueueJobs(): Promise<Array<QueueItemDto>> {
        const response = await this.emailClientControllerPeekFailedQueueJobsRaw();
        return await response.value();
    }

    /**
     */
    async emailClientControllerPeekQueueJobsRaw(): Promise<runtime.ApiResponse<Array<QueueItemDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/email-client/peekalljobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QueueItemDtoFromJSON));
    }

    /**
     */
    async emailClientControllerPeekQueueJobs(): Promise<Array<QueueItemDto>> {
        const response = await this.emailClientControllerPeekQueueJobsRaw();
        return await response.value();
    }

    /**
     */
    async organisationSubscriptionsControllerAddSubscriptionRaw(requestParameters: OrganisationSubscriptionsControllerAddSubscriptionRequest): Promise<runtime.ApiResponse<Array<OrganisationSubscriptionRecord>>> {
        if (requestParameters.orgUuid === null || requestParameters.orgUuid === undefined) {
            throw new runtime.RequiredError('orgUuid','Required parameter requestParameters.orgUuid was null or undefined when calling organisationSubscriptionsControllerAddSubscription.');
        }

        if (requestParameters.saveOrganisationSubscriptionRecordDto === null || requestParameters.saveOrganisationSubscriptionRecordDto === undefined) {
            throw new runtime.RequiredError('saveOrganisationSubscriptionRecordDto','Required parameter requestParameters.saveOrganisationSubscriptionRecordDto was null or undefined when calling organisationSubscriptionsControllerAddSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{orgUuid}/subscriptions`.replace(`{${"orgUuid"}}`, encodeURIComponent(String(requestParameters.orgUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveOrganisationSubscriptionRecordDtoToJSON(requestParameters.saveOrganisationSubscriptionRecordDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationSubscriptionRecordFromJSON));
    }

    /**
     */
    async organisationSubscriptionsControllerAddSubscription(requestParameters: OrganisationSubscriptionsControllerAddSubscriptionRequest): Promise<Array<OrganisationSubscriptionRecord>> {
        const response = await this.organisationSubscriptionsControllerAddSubscriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationSubscriptionsControllerDeleteSubscriptionRaw(requestParameters: OrganisationSubscriptionsControllerDeleteSubscriptionRequest): Promise<runtime.ApiResponse<BooleanResult>> {
        if (requestParameters.orgUuid === null || requestParameters.orgUuid === undefined) {
            throw new runtime.RequiredError('orgUuid','Required parameter requestParameters.orgUuid was null or undefined when calling organisationSubscriptionsControllerDeleteSubscription.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling organisationSubscriptionsControllerDeleteSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{orgUuid}/subscriptions/{uuid}`.replace(`{${"orgUuid"}}`, encodeURIComponent(String(requestParameters.orgUuid))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResultFromJSON(jsonValue));
    }

    /**
     */
    async organisationSubscriptionsControllerDeleteSubscription(requestParameters: OrganisationSubscriptionsControllerDeleteSubscriptionRequest): Promise<BooleanResult> {
        const response = await this.organisationSubscriptionsControllerDeleteSubscriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async paymentSessionReferenceControllerFindAllRaw(): Promise<runtime.ApiResponse<Array<PaymentSessionReference>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/payment-reference`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentSessionReferenceFromJSON));
    }

    /**
     */
    async paymentSessionReferenceControllerFindAll(): Promise<Array<PaymentSessionReference>> {
        const response = await this.paymentSessionReferenceControllerFindAllRaw();
        return await response.value();
    }

    /**
     */
    async stripeEventsControllerGetLastEventsRaw(requestParameters: StripeEventsControllerGetLastEventsRequest): Promise<runtime.ApiResponse<Array<StripeCheckoutEvent>>> {
        if (requestParameters.skip === null || requestParameters.skip === undefined) {
            throw new runtime.RequiredError('skip','Required parameter requestParameters.skip was null or undefined when calling stripeEventsControllerGetLastEvents.');
        }

        if (requestParameters.take === null || requestParameters.take === undefined) {
            throw new runtime.RequiredError('take','Required parameter requestParameters.take was null or undefined when calling stripeEventsControllerGetLastEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/payments/stripe/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StripeCheckoutEventFromJSON));
    }

    /**
     */
    async stripeEventsControllerGetLastEvents(requestParameters: StripeEventsControllerGetLastEventsRequest): Promise<Array<StripeCheckoutEvent>> {
        const response = await this.stripeEventsControllerGetLastEventsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async stripeWebhookControllerPeekFailedQueueJobsRaw(): Promise<runtime.ApiResponse<Array<QueueItemDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/payments/stripe/peekfailedjobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QueueItemDtoFromJSON));
    }

    /**
     */
    async stripeWebhookControllerPeekFailedQueueJobs(): Promise<Array<QueueItemDto>> {
        const response = await this.stripeWebhookControllerPeekFailedQueueJobsRaw();
        return await response.value();
    }

    /**
     */
    async stripeWebhookControllerPeekQueueJobsRaw(): Promise<runtime.ApiResponse<Array<QueueItemDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/payments/stripe/peekalljobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QueueItemDtoFromJSON));
    }

    /**
     */
    async stripeWebhookControllerPeekQueueJobs(): Promise<Array<QueueItemDto>> {
        const response = await this.stripeWebhookControllerPeekQueueJobsRaw();
        return await response.value();
    }

    /**
     */
    async superPowersControllerResetDatabaseRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/super-powers/reset-database`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async superPowersControllerResetDatabase(): Promise<void> {
        await this.superPowersControllerResetDatabaseRaw();
    }

    /**
     * Get all users in the system. Limited to Super Admin role.
     */
    async userControllerFindAllRaw(): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Get all users in the system. Limited to Super Admin role.
     */
    async userControllerFindAll(): Promise<Array<User>> {
        const response = await this.userControllerFindAllRaw();
        return await response.value();
    }

}
