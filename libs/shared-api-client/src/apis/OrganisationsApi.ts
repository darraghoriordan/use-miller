/* tslint:disable */
/* eslint-disable */
/**
 * Miller App BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
    Organisation,
    OrganisationFromJSON,
    OrganisationToJSON,
    UpdateOrganisationDto,
    UpdateOrganisationDtoFromJSON,
    UpdateOrganisationDtoToJSON,
} from "../models";

export interface OrganisationControllerFindOneRequest {
    uuid: string;
}

export interface OrganisationControllerRemoveRequest {
    uuid: string;
}

export interface OrganisationControllerUpdateRequest {
    uuid: string;
    updateOrganisationDto: UpdateOrganisationDto;
}

/**
 * OrganisationsApi - interface
 *
 * @export
 * @interface OrganisationsApiInterface
 */
export interface OrganisationsApiInterface {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApiInterface
     */
    organisationControllerFindAllForUserRaw(): Promise<
        runtime.ApiResponse<Array<Organisation>>
    >;

    /**
     */
    organisationControllerFindAllForUser(): Promise<Array<Organisation>>;

    /**
     *
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApiInterface
     */
    organisationControllerFindOneRaw(
        requestParameters: OrganisationControllerFindOneRequest
    ): Promise<runtime.ApiResponse<Organisation>>;

    /**
     */
    organisationControllerFindOne(
        requestParameters: OrganisationControllerFindOneRequest
    ): Promise<Organisation>;

    /**
     *
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApiInterface
     */
    organisationControllerRemoveRaw(
        requestParameters: OrganisationControllerRemoveRequest
    ): Promise<runtime.ApiResponse<Organisation>>;

    /**
     */
    organisationControllerRemove(
        requestParameters: OrganisationControllerRemoveRequest
    ): Promise<Organisation>;

    /**
     *
     * @param {string} uuid
     * @param {UpdateOrganisationDto} updateOrganisationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApiInterface
     */
    organisationControllerUpdateRaw(
        requestParameters: OrganisationControllerUpdateRequest
    ): Promise<runtime.ApiResponse<Organisation>>;

    /**
     */
    organisationControllerUpdate(
        requestParameters: OrganisationControllerUpdateRequest
    ): Promise<Organisation>;
}

/**
 *
 */
export class OrganisationsApi
    extends runtime.BaseAPI
    implements OrganisationsApiInterface
{
    /**
     */
    async organisationControllerFindAllForUserRaw(): Promise<
        runtime.ApiResponse<Array<Organisation>>
    > {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString =
                typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(OrganisationFromJSON)
        );
    }

    /**
     */
    async organisationControllerFindAllForUser(): Promise<Array<Organisation>> {
        const response = await this.organisationControllerFindAllForUserRaw();
        return await response.value();
    }

    /**
     */
    async organisationControllerFindOneRaw(
        requestParameters: OrganisationControllerFindOneRequest
    ): Promise<runtime.ApiResponse<Organisation>> {
        if (
            requestParameters.uuid === null ||
            requestParameters.uuid === undefined
        ) {
            throw new runtime.RequiredError(
                "uuid",
                "Required parameter requestParameters.uuid was null or undefined when calling organisationControllerFindOne."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString =
                typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{uuid}`.replace(
                `{${"uuid"}}`,
                encodeURIComponent(String(requestParameters.uuid))
            ),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            OrganisationFromJSON(jsonValue)
        );
    }

    /**
     */
    async organisationControllerFindOne(
        requestParameters: OrganisationControllerFindOneRequest
    ): Promise<Organisation> {
        const response = await this.organisationControllerFindOneRaw(
            requestParameters
        );
        return await response.value();
    }

    /**
     */
    async organisationControllerRemoveRaw(
        requestParameters: OrganisationControllerRemoveRequest
    ): Promise<runtime.ApiResponse<Organisation>> {
        if (
            requestParameters.uuid === null ||
            requestParameters.uuid === undefined
        ) {
            throw new runtime.RequiredError(
                "uuid",
                "Required parameter requestParameters.uuid was null or undefined when calling organisationControllerRemove."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString =
                typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{uuid}`.replace(
                `{${"uuid"}}`,
                encodeURIComponent(String(requestParameters.uuid))
            ),
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            OrganisationFromJSON(jsonValue)
        );
    }

    /**
     */
    async organisationControllerRemove(
        requestParameters: OrganisationControllerRemoveRequest
    ): Promise<Organisation> {
        const response = await this.organisationControllerRemoveRaw(
            requestParameters
        );
        return await response.value();
    }

    /**
     */
    async organisationControllerUpdateRaw(
        requestParameters: OrganisationControllerUpdateRequest
    ): Promise<runtime.ApiResponse<Organisation>> {
        if (
            requestParameters.uuid === null ||
            requestParameters.uuid === undefined
        ) {
            throw new runtime.RequiredError(
                "uuid",
                "Required parameter requestParameters.uuid was null or undefined when calling organisationControllerUpdate."
            );
        }

        if (
            requestParameters.updateOrganisationDto === null ||
            requestParameters.updateOrganisationDto === undefined
        ) {
            throw new runtime.RequiredError(
                "updateOrganisationDto",
                "Required parameter requestParameters.updateOrganisationDto was null or undefined when calling organisationControllerUpdate."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString =
                typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{uuid}`.replace(
                `{${"uuid"}}`,
                encodeURIComponent(String(requestParameters.uuid))
            ),
            method: "PATCH",
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganisationDtoToJSON(
                requestParameters.updateOrganisationDto
            ),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            OrganisationFromJSON(jsonValue)
        );
    }

    /**
     */
    async organisationControllerUpdate(
        requestParameters: OrganisationControllerUpdateRequest
    ): Promise<Organisation> {
        const response = await this.organisationControllerUpdateRaw(
            requestParameters
        );
        return await response.value();
    }
}
