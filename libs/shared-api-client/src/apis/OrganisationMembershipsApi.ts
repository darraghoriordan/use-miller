/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BooleanResult,
    BooleanResultFromJSON,
    BooleanResultToJSON,
    CreateUpdateMembershipDto,
    CreateUpdateMembershipDtoFromJSON,
    CreateUpdateMembershipDtoToJSON,
    Organisation,
    OrganisationFromJSON,
    OrganisationToJSON,
    OrganisationMembership,
    OrganisationMembershipFromJSON,
    OrganisationMembershipToJSON,
} from '../models';

export interface OrganisationMembershipsControllerCreateOrUpdateRequest {
    orgUuid: string;
    createUpdateMembershipDto: CreateUpdateMembershipDto;
}

export interface OrganisationMembershipsControllerFindAllRequest {
    orgUuid: string;
}

export interface OrganisationMembershipsControllerRemoveRequest {
    orgUuid: string;
    membershipUuid: string;
}

/**
 * OrganisationMembershipsApi - interface
 * 
 * @export
 * @interface OrganisationMembershipsApiInterface
 */
export interface OrganisationMembershipsApiInterface {
    /**
     * 
     * @param {string} orgUuid 
     * @param {CreateUpdateMembershipDto} createUpdateMembershipDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationMembershipsApiInterface
     */
    organisationMembershipsControllerCreateOrUpdateRaw(requestParameters: OrganisationMembershipsControllerCreateOrUpdateRequest): Promise<runtime.ApiResponse<Organisation>>;

    /**
     */
    organisationMembershipsControllerCreateOrUpdate(requestParameters: OrganisationMembershipsControllerCreateOrUpdateRequest): Promise<Organisation>;

    /**
     * 
     * @param {string} orgUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationMembershipsApiInterface
     */
    organisationMembershipsControllerFindAllRaw(requestParameters: OrganisationMembershipsControllerFindAllRequest): Promise<runtime.ApiResponse<Array<OrganisationMembership>>>;

    /**
     */
    organisationMembershipsControllerFindAll(requestParameters: OrganisationMembershipsControllerFindAllRequest): Promise<Array<OrganisationMembership>>;

    /**
     * 
     * @param {string} orgUuid 
     * @param {string} membershipUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationMembershipsApiInterface
     */
    organisationMembershipsControllerRemoveRaw(requestParameters: OrganisationMembershipsControllerRemoveRequest): Promise<runtime.ApiResponse<BooleanResult>>;

    /**
     */
    organisationMembershipsControllerRemove(requestParameters: OrganisationMembershipsControllerRemoveRequest): Promise<BooleanResult>;

}

/**
 * 
 */
export class OrganisationMembershipsApi extends runtime.BaseAPI implements OrganisationMembershipsApiInterface {

    /**
     */
    async organisationMembershipsControllerCreateOrUpdateRaw(requestParameters: OrganisationMembershipsControllerCreateOrUpdateRequest): Promise<runtime.ApiResponse<Organisation>> {
        if (requestParameters.orgUuid === null || requestParameters.orgUuid === undefined) {
            throw new runtime.RequiredError('orgUuid','Required parameter requestParameters.orgUuid was null or undefined when calling organisationMembershipsControllerCreateOrUpdate.');
        }

        if (requestParameters.createUpdateMembershipDto === null || requestParameters.createUpdateMembershipDto === undefined) {
            throw new runtime.RequiredError('createUpdateMembershipDto','Required parameter requestParameters.createUpdateMembershipDto was null or undefined when calling organisationMembershipsControllerCreateOrUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{orgUuid}/memberships`.replace(`{${"orgUuid"}}`, encodeURIComponent(String(requestParameters.orgUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUpdateMembershipDtoToJSON(requestParameters.createUpdateMembershipDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationFromJSON(jsonValue));
    }

    /**
     */
    async organisationMembershipsControllerCreateOrUpdate(requestParameters: OrganisationMembershipsControllerCreateOrUpdateRequest): Promise<Organisation> {
        const response = await this.organisationMembershipsControllerCreateOrUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationMembershipsControllerFindAllRaw(requestParameters: OrganisationMembershipsControllerFindAllRequest): Promise<runtime.ApiResponse<Array<OrganisationMembership>>> {
        if (requestParameters.orgUuid === null || requestParameters.orgUuid === undefined) {
            throw new runtime.RequiredError('orgUuid','Required parameter requestParameters.orgUuid was null or undefined when calling organisationMembershipsControllerFindAll.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{orgUuid}/memberships`.replace(`{${"orgUuid"}}`, encodeURIComponent(String(requestParameters.orgUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationMembershipFromJSON));
    }

    /**
     */
    async organisationMembershipsControllerFindAll(requestParameters: OrganisationMembershipsControllerFindAllRequest): Promise<Array<OrganisationMembership>> {
        const response = await this.organisationMembershipsControllerFindAllRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationMembershipsControllerRemoveRaw(requestParameters: OrganisationMembershipsControllerRemoveRequest): Promise<runtime.ApiResponse<BooleanResult>> {
        if (requestParameters.orgUuid === null || requestParameters.orgUuid === undefined) {
            throw new runtime.RequiredError('orgUuid','Required parameter requestParameters.orgUuid was null or undefined when calling organisationMembershipsControllerRemove.');
        }

        if (requestParameters.membershipUuid === null || requestParameters.membershipUuid === undefined) {
            throw new runtime.RequiredError('membershipUuid','Required parameter requestParameters.membershipUuid was null or undefined when calling organisationMembershipsControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{orgUuid}/memberships/{membershipUuid}`.replace(`{${"orgUuid"}}`, encodeURIComponent(String(requestParameters.orgUuid))).replace(`{${"membershipUuid"}}`, encodeURIComponent(String(requestParameters.membershipUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResultFromJSON(jsonValue));
    }

    /**
     */
    async organisationMembershipsControllerRemove(requestParameters: OrganisationMembershipsControllerRemoveRequest): Promise<BooleanResult> {
        const response = await this.organisationMembershipsControllerRemoveRaw(requestParameters);
        return await response.value();
    }

}
