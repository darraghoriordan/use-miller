/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateInvitationDto,
    CreateInvitationDtoFromJSON,
    CreateInvitationDtoToJSON,
    Invitation,
    InvitationFromJSON,
    InvitationToJSON,
} from '../models';

export interface InvitationControllerAcceptRequest {
    invitationId: string;
}

export interface InvitationControllerCreateRequest {
    createInvitationDto: CreateInvitationDto;
}

export interface InvitationControllerGetAllForOrgRequest {
    orgId: string;
}

export interface InvitationControllerRemoveRequest {
    uuid: string;
}

/**
 * InvitationsApi - interface
 * 
 * @export
 * @interface InvitationsApiInterface
 */
export interface InvitationsApiInterface {
    /**
     * 
     * @param {string} invitationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApiInterface
     */
    invitationControllerAcceptRaw(requestParameters: InvitationControllerAcceptRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    invitationControllerAccept(requestParameters: InvitationControllerAcceptRequest): Promise<void>;

    /**
     * 
     * @param {CreateInvitationDto} createInvitationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApiInterface
     */
    invitationControllerCreateRaw(requestParameters: InvitationControllerCreateRequest): Promise<runtime.ApiResponse<Invitation>>;

    /**
     */
    invitationControllerCreate(requestParameters: InvitationControllerCreateRequest): Promise<Invitation>;

    /**
     * 
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApiInterface
     */
    invitationControllerGetAllForOrgRaw(requestParameters: InvitationControllerGetAllForOrgRequest): Promise<runtime.ApiResponse<Array<Invitation>>>;

    /**
     */
    invitationControllerGetAllForOrg(requestParameters: InvitationControllerGetAllForOrgRequest): Promise<Array<Invitation>>;

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApiInterface
     */
    invitationControllerRemoveRaw(requestParameters: InvitationControllerRemoveRequest): Promise<runtime.ApiResponse<boolean>>;

    /**
     */
    invitationControllerRemove(requestParameters: InvitationControllerRemoveRequest): Promise<boolean>;

}

/**
 * 
 */
export class InvitationsApi extends runtime.BaseAPI implements InvitationsApiInterface {

    /**
     */
    async invitationControllerAcceptRaw(requestParameters: InvitationControllerAcceptRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.invitationId === null || requestParameters.invitationId === undefined) {
            throw new runtime.RequiredError('invitationId','Required parameter requestParameters.invitationId was null or undefined when calling invitationControllerAccept.');
        }

        const queryParameters: any = {};

        if (requestParameters.invitationId !== undefined) {
            queryParameters['invitationId'] = requestParameters.invitationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invitations/accept`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async invitationControllerAccept(requestParameters: InvitationControllerAcceptRequest): Promise<void> {
        await this.invitationControllerAcceptRaw(requestParameters);
    }

    /**
     */
    async invitationControllerCreateRaw(requestParameters: InvitationControllerCreateRequest): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.createInvitationDto === null || requestParameters.createInvitationDto === undefined) {
            throw new runtime.RequiredError('createInvitationDto','Required parameter requestParameters.createInvitationDto was null or undefined when calling invitationControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invitations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInvitationDtoToJSON(requestParameters.createInvitationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     */
    async invitationControllerCreate(requestParameters: InvitationControllerCreateRequest): Promise<Invitation> {
        const response = await this.invitationControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async invitationControllerGetAllForOrgRaw(requestParameters: InvitationControllerGetAllForOrgRequest): Promise<runtime.ApiResponse<Array<Invitation>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling invitationControllerGetAllForOrg.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invitations/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvitationFromJSON));
    }

    /**
     */
    async invitationControllerGetAllForOrg(requestParameters: InvitationControllerGetAllForOrgRequest): Promise<Array<Invitation>> {
        const response = await this.invitationControllerGetAllForOrgRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async invitationControllerRemoveRaw(requestParameters: InvitationControllerRemoveRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling invitationControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invitations/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async invitationControllerRemove(requestParameters: InvitationControllerRemoveRequest): Promise<boolean> {
        const response = await this.invitationControllerRemoveRaw(requestParameters);
        return await response.value();
    }

}
