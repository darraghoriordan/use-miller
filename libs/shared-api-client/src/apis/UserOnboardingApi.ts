/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OrgGithubUser,
    OrgGithubUserFromJSON,
    OrgGithubUserToJSON,
    OrgGithubUserDto,
    OrgGithubUserDtoFromJSON,
    OrgGithubUserDtoToJSON,
} from '../models';

export interface UserOnboardingControllerAddForOrgRequest {
    orgGithubUserDto: OrgGithubUserDto;
}

export interface UserOnboardingControllerGetAllForOrgRequest {
    orgUuid: string;
}

/**
 * UserOnboardingApi - interface
 * 
 * @export
 * @interface UserOnboardingApiInterface
 */
export interface UserOnboardingApiInterface {
    /**
     * 
     * @param {OrgGithubUserDto} orgGithubUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOnboardingApiInterface
     */
    userOnboardingControllerAddForOrgRaw(requestParameters: UserOnboardingControllerAddForOrgRequest): Promise<runtime.ApiResponse<OrgGithubUser>>;

    /**
     */
    userOnboardingControllerAddForOrg(requestParameters: UserOnboardingControllerAddForOrgRequest): Promise<OrgGithubUser>;

    /**
     * 
     * @param {string} orgUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOnboardingApiInterface
     */
    userOnboardingControllerGetAllForOrgRaw(requestParameters: UserOnboardingControllerGetAllForOrgRequest): Promise<runtime.ApiResponse<Array<OrgGithubUser>>>;

    /**
     */
    userOnboardingControllerGetAllForOrg(requestParameters: UserOnboardingControllerGetAllForOrgRequest): Promise<Array<OrgGithubUser>>;

}

/**
 * 
 */
export class UserOnboardingApi extends runtime.BaseAPI implements UserOnboardingApiInterface {

    /**
     */
    async userOnboardingControllerAddForOrgRaw(requestParameters: UserOnboardingControllerAddForOrgRequest): Promise<runtime.ApiResponse<OrgGithubUser>> {
        if (requestParameters.orgGithubUserDto === null || requestParameters.orgGithubUserDto === undefined) {
            throw new runtime.RequiredError('orgGithubUserDto','Required parameter requestParameters.orgGithubUserDto was null or undefined when calling userOnboardingControllerAddForOrg.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/onboarding/github-user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrgGithubUserDtoToJSON(requestParameters.orgGithubUserDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrgGithubUserFromJSON(jsonValue));
    }

    /**
     */
    async userOnboardingControllerAddForOrg(requestParameters: UserOnboardingControllerAddForOrgRequest): Promise<OrgGithubUser> {
        const response = await this.userOnboardingControllerAddForOrgRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userOnboardingControllerGetAllForOrgRaw(requestParameters: UserOnboardingControllerGetAllForOrgRequest): Promise<runtime.ApiResponse<Array<OrgGithubUser>>> {
        if (requestParameters.orgUuid === null || requestParameters.orgUuid === undefined) {
            throw new runtime.RequiredError('orgUuid','Required parameter requestParameters.orgUuid was null or undefined when calling userOnboardingControllerGetAllForOrg.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/onboarding/github-user/{orgUuid}`.replace(`{${"orgUuid"}}`, encodeURIComponent(String(requestParameters.orgUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrgGithubUserFromJSON));
    }

    /**
     */
    async userOnboardingControllerGetAllForOrg(requestParameters: UserOnboardingControllerGetAllForOrgRequest): Promise<Array<OrgGithubUser>> {
        const response = await this.userOnboardingControllerGetAllForOrgRaw(requestParameters);
        return await response.value();
    }

}
