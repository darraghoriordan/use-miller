/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FileMetaDto,
    FileMetaDtoFromJSON,
    FileMetaDtoToJSON,
    FileStructureDto,
    FileStructureDtoFromJSON,
    FileStructureDtoToJSON,
} from '../models';

export interface CourseFilesControllerGetFileRequest {
    courseName: string;
    b64Path: string;
}

export interface CourseFilesControllerListCourseFilesRequest {
    courseName: string;
}

/**
 * CourseFilesApi - interface
 * 
 * @export
 * @interface CourseFilesApiInterface
 */
export interface CourseFilesApiInterface {
    /**
     * 
     * @param {string} courseName 
     * @param {string} b64Path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseFilesApiInterface
     */
    courseFilesControllerGetFileRaw(requestParameters: CourseFilesControllerGetFileRequest): Promise<runtime.ApiResponse<FileMetaDto>>;

    /**
     */
    courseFilesControllerGetFile(requestParameters: CourseFilesControllerGetFileRequest): Promise<FileMetaDto>;

    /**
     * 
     * @param {string} courseName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseFilesApiInterface
     */
    courseFilesControllerListCourseFilesRaw(requestParameters: CourseFilesControllerListCourseFilesRequest): Promise<runtime.ApiResponse<FileStructureDto>>;

    /**
     */
    courseFilesControllerListCourseFiles(requestParameters: CourseFilesControllerListCourseFilesRequest): Promise<FileStructureDto>;

}

/**
 * 
 */
export class CourseFilesApi extends runtime.BaseAPI implements CourseFilesApiInterface {

    /**
     */
    async courseFilesControllerGetFileRaw(requestParameters: CourseFilesControllerGetFileRequest): Promise<runtime.ApiResponse<FileMetaDto>> {
        if (requestParameters.courseName === null || requestParameters.courseName === undefined) {
            throw new runtime.RequiredError('courseName','Required parameter requestParameters.courseName was null or undefined when calling courseFilesControllerGetFile.');
        }

        if (requestParameters.b64Path === null || requestParameters.b64Path === undefined) {
            throw new runtime.RequiredError('b64Path','Required parameter requestParameters.b64Path was null or undefined when calling courseFilesControllerGetFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-files/{courseName}/contents/{b64Path}`.replace(`{${"courseName"}}`, encodeURIComponent(String(requestParameters.courseName))).replace(`{${"b64Path"}}`, encodeURIComponent(String(requestParameters.b64Path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileMetaDtoFromJSON(jsonValue));
    }

    /**
     */
    async courseFilesControllerGetFile(requestParameters: CourseFilesControllerGetFileRequest): Promise<FileMetaDto> {
        const response = await this.courseFilesControllerGetFileRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async courseFilesControllerListCourseFilesRaw(requestParameters: CourseFilesControllerListCourseFilesRequest): Promise<runtime.ApiResponse<FileStructureDto>> {
        if (requestParameters.courseName === null || requestParameters.courseName === undefined) {
            throw new runtime.RequiredError('courseName','Required parameter requestParameters.courseName was null or undefined when calling courseFilesControllerListCourseFiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-files/{courseName}`.replace(`{${"courseName"}}`, encodeURIComponent(String(requestParameters.courseName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileStructureDtoFromJSON(jsonValue));
    }

    /**
     */
    async courseFilesControllerListCourseFiles(requestParameters: CourseFilesControllerListCourseFilesRequest): Promise<FileStructureDto> {
        const response = await this.courseFilesControllerListCourseFilesRaw(requestParameters);
        return await response.value();
    }

}
