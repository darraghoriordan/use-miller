/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OrganisationSubscriptionRecord,
    OrganisationSubscriptionRecordFromJSON,
    OrganisationSubscriptionRecordToJSON,
    SaveSubscriptionAssetDto,
    SaveSubscriptionAssetDtoFromJSON,
    SaveSubscriptionAssetDtoToJSON,
    SubscriptionAsset,
    SubscriptionAssetFromJSON,
    SubscriptionAssetToJSON,
} from '../models';

export interface OrganisationSubscriptionsControllerFindAllRequest {
    orgUuid: string;
}

export interface SubscriptionAssetsControllerAddAssetRecordRequest {
    saveSubscriptionAssetDto: SaveSubscriptionAssetDto;
}

export interface SubscriptionAssetsControllerDeleteAssetRecordRequest {
    id: number;
}

/**
 * OrganisationSubscriptionsApi - interface
 * 
 * @export
 * @interface OrganisationSubscriptionsApiInterface
 */
export interface OrganisationSubscriptionsApiInterface {
    /**
     * 
     * @param {string} orgUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationSubscriptionsApiInterface
     */
    organisationSubscriptionsControllerFindAllRaw(requestParameters: OrganisationSubscriptionsControllerFindAllRequest): Promise<runtime.ApiResponse<Array<OrganisationSubscriptionRecord>>>;

    /**
     */
    organisationSubscriptionsControllerFindAll(requestParameters: OrganisationSubscriptionsControllerFindAllRequest): Promise<Array<OrganisationSubscriptionRecord>>;

    /**
     * 
     * @param {SaveSubscriptionAssetDto} saveSubscriptionAssetDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationSubscriptionsApiInterface
     */
    subscriptionAssetsControllerAddAssetRecordRaw(requestParameters: SubscriptionAssetsControllerAddAssetRecordRequest): Promise<runtime.ApiResponse<Array<SubscriptionAsset>>>;

    /**
     */
    subscriptionAssetsControllerAddAssetRecord(requestParameters: SubscriptionAssetsControllerAddAssetRecordRequest): Promise<Array<SubscriptionAsset>>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationSubscriptionsApiInterface
     */
    subscriptionAssetsControllerDeleteAssetRecordRaw(requestParameters: SubscriptionAssetsControllerDeleteAssetRecordRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    subscriptionAssetsControllerDeleteAssetRecord(requestParameters: SubscriptionAssetsControllerDeleteAssetRecordRequest): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationSubscriptionsApiInterface
     */
    subscriptionAssetsControllerGetAssetsForOrgRaw(): Promise<runtime.ApiResponse<Array<SubscriptionAsset>>>;

    /**
     */
    subscriptionAssetsControllerGetAssetsForOrg(): Promise<Array<SubscriptionAsset>>;

}

/**
 * 
 */
export class OrganisationSubscriptionsApi extends runtime.BaseAPI implements OrganisationSubscriptionsApiInterface {

    /**
     */
    async organisationSubscriptionsControllerFindAllRaw(requestParameters: OrganisationSubscriptionsControllerFindAllRequest): Promise<runtime.ApiResponse<Array<OrganisationSubscriptionRecord>>> {
        if (requestParameters.orgUuid === null || requestParameters.orgUuid === undefined) {
            throw new runtime.RequiredError('orgUuid','Required parameter requestParameters.orgUuid was null or undefined when calling organisationSubscriptionsControllerFindAll.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{orgUuid}/subscriptions`.replace(`{${"orgUuid"}}`, encodeURIComponent(String(requestParameters.orgUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationSubscriptionRecordFromJSON));
    }

    /**
     */
    async organisationSubscriptionsControllerFindAll(requestParameters: OrganisationSubscriptionsControllerFindAllRequest): Promise<Array<OrganisationSubscriptionRecord>> {
        const response = await this.organisationSubscriptionsControllerFindAllRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async subscriptionAssetsControllerAddAssetRecordRaw(requestParameters: SubscriptionAssetsControllerAddAssetRecordRequest): Promise<runtime.ApiResponse<Array<SubscriptionAsset>>> {
        if (requestParameters.saveSubscriptionAssetDto === null || requestParameters.saveSubscriptionAssetDto === undefined) {
            throw new runtime.RequiredError('saveSubscriptionAssetDto','Required parameter requestParameters.saveSubscriptionAssetDto was null or undefined when calling subscriptionAssetsControllerAddAssetRecord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/subscription-assets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveSubscriptionAssetDtoToJSON(requestParameters.saveSubscriptionAssetDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionAssetFromJSON));
    }

    /**
     */
    async subscriptionAssetsControllerAddAssetRecord(requestParameters: SubscriptionAssetsControllerAddAssetRecordRequest): Promise<Array<SubscriptionAsset>> {
        const response = await this.subscriptionAssetsControllerAddAssetRecordRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async subscriptionAssetsControllerDeleteAssetRecordRaw(requestParameters: SubscriptionAssetsControllerDeleteAssetRecordRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionAssetsControllerDeleteAssetRecord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/subscription-assets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async subscriptionAssetsControllerDeleteAssetRecord(requestParameters: SubscriptionAssetsControllerDeleteAssetRecordRequest): Promise<void> {
        await this.subscriptionAssetsControllerDeleteAssetRecordRaw(requestParameters);
    }

    /**
     */
    async subscriptionAssetsControllerGetAssetsForOrgRaw(): Promise<runtime.ApiResponse<Array<SubscriptionAsset>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/subscription-assets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionAssetFromJSON));
    }

    /**
     */
    async subscriptionAssetsControllerGetAssetsForOrg(): Promise<Array<SubscriptionAsset>> {
        const response = await this.subscriptionAssetsControllerGetAssetsForOrgRaw();
        return await response.value();
    }

}
