/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OrganisationSubscriptionRecord,
    OrganisationSubscriptionRecordFromJSON,
    OrganisationSubscriptionRecordToJSON,
    SaveOrganisationSubscriptionRecordDto,
    SaveOrganisationSubscriptionRecordDtoFromJSON,
    SaveOrganisationSubscriptionRecordDtoToJSON,
} from '../models';

export interface OrganisationSubscriptionsControllerAddSubscriptionRequest {
    orgUuid: string;
    saveOrganisationSubscriptionRecordDto: SaveOrganisationSubscriptionRecordDto;
}

export interface OrganisationSubscriptionsControllerDeleteSubscriptionRequest {
    orgUuid: string;
    uuid: string;
}

export interface OrganisationSubscriptionsControllerFindAllRequest {
    orgUuid: string;
}

export interface OrganisationSubscriptionsControllerUpdateSubscriptionRequest {
    uuid: string;
    orgUuid: string;
    saveOrganisationSubscriptionRecordDto: SaveOrganisationSubscriptionRecordDto;
}

/**
 * OrganisationSubscriptionsApi - interface
 * 
 * @export
 * @interface OrganisationSubscriptionsApiInterface
 */
export interface OrganisationSubscriptionsApiInterface {
    /**
     * 
     * @param {string} orgUuid 
     * @param {SaveOrganisationSubscriptionRecordDto} saveOrganisationSubscriptionRecordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationSubscriptionsApiInterface
     */
    organisationSubscriptionsControllerAddSubscriptionRaw(requestParameters: OrganisationSubscriptionsControllerAddSubscriptionRequest): Promise<runtime.ApiResponse<OrganisationSubscriptionRecord>>;

    /**
     */
    organisationSubscriptionsControllerAddSubscription(requestParameters: OrganisationSubscriptionsControllerAddSubscriptionRequest): Promise<OrganisationSubscriptionRecord>;

    /**
     * 
     * @param {string} orgUuid 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationSubscriptionsApiInterface
     */
    organisationSubscriptionsControllerDeleteSubscriptionRaw(requestParameters: OrganisationSubscriptionsControllerDeleteSubscriptionRequest): Promise<runtime.ApiResponse<boolean>>;

    /**
     */
    organisationSubscriptionsControllerDeleteSubscription(requestParameters: OrganisationSubscriptionsControllerDeleteSubscriptionRequest): Promise<boolean>;

    /**
     * 
     * @param {string} orgUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationSubscriptionsApiInterface
     */
    organisationSubscriptionsControllerFindAllRaw(requestParameters: OrganisationSubscriptionsControllerFindAllRequest): Promise<runtime.ApiResponse<Array<OrganisationSubscriptionRecord>>>;

    /**
     */
    organisationSubscriptionsControllerFindAll(requestParameters: OrganisationSubscriptionsControllerFindAllRequest): Promise<Array<OrganisationSubscriptionRecord>>;

    /**
     * 
     * @param {string} uuid 
     * @param {string} orgUuid 
     * @param {SaveOrganisationSubscriptionRecordDto} saveOrganisationSubscriptionRecordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationSubscriptionsApiInterface
     */
    organisationSubscriptionsControllerUpdateSubscriptionRaw(requestParameters: OrganisationSubscriptionsControllerUpdateSubscriptionRequest): Promise<runtime.ApiResponse<OrganisationSubscriptionRecord>>;

    /**
     */
    organisationSubscriptionsControllerUpdateSubscription(requestParameters: OrganisationSubscriptionsControllerUpdateSubscriptionRequest): Promise<OrganisationSubscriptionRecord>;

}

/**
 * 
 */
export class OrganisationSubscriptionsApi extends runtime.BaseAPI implements OrganisationSubscriptionsApiInterface {

    /**
     */
    async organisationSubscriptionsControllerAddSubscriptionRaw(requestParameters: OrganisationSubscriptionsControllerAddSubscriptionRequest): Promise<runtime.ApiResponse<OrganisationSubscriptionRecord>> {
        if (requestParameters.orgUuid === null || requestParameters.orgUuid === undefined) {
            throw new runtime.RequiredError('orgUuid','Required parameter requestParameters.orgUuid was null or undefined when calling organisationSubscriptionsControllerAddSubscription.');
        }

        if (requestParameters.saveOrganisationSubscriptionRecordDto === null || requestParameters.saveOrganisationSubscriptionRecordDto === undefined) {
            throw new runtime.RequiredError('saveOrganisationSubscriptionRecordDto','Required parameter requestParameters.saveOrganisationSubscriptionRecordDto was null or undefined when calling organisationSubscriptionsControllerAddSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{orgUuid}/subscriptions`.replace(`{${"orgUuid"}}`, encodeURIComponent(String(requestParameters.orgUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveOrganisationSubscriptionRecordDtoToJSON(requestParameters.saveOrganisationSubscriptionRecordDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationSubscriptionRecordFromJSON(jsonValue));
    }

    /**
     */
    async organisationSubscriptionsControllerAddSubscription(requestParameters: OrganisationSubscriptionsControllerAddSubscriptionRequest): Promise<OrganisationSubscriptionRecord> {
        const response = await this.organisationSubscriptionsControllerAddSubscriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationSubscriptionsControllerDeleteSubscriptionRaw(requestParameters: OrganisationSubscriptionsControllerDeleteSubscriptionRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.orgUuid === null || requestParameters.orgUuid === undefined) {
            throw new runtime.RequiredError('orgUuid','Required parameter requestParameters.orgUuid was null or undefined when calling organisationSubscriptionsControllerDeleteSubscription.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling organisationSubscriptionsControllerDeleteSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{orgUuid}/subscriptions/{uuid}`.replace(`{${"orgUuid"}}`, encodeURIComponent(String(requestParameters.orgUuid))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async organisationSubscriptionsControllerDeleteSubscription(requestParameters: OrganisationSubscriptionsControllerDeleteSubscriptionRequest): Promise<boolean> {
        const response = await this.organisationSubscriptionsControllerDeleteSubscriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationSubscriptionsControllerFindAllRaw(requestParameters: OrganisationSubscriptionsControllerFindAllRequest): Promise<runtime.ApiResponse<Array<OrganisationSubscriptionRecord>>> {
        if (requestParameters.orgUuid === null || requestParameters.orgUuid === undefined) {
            throw new runtime.RequiredError('orgUuid','Required parameter requestParameters.orgUuid was null or undefined when calling organisationSubscriptionsControllerFindAll.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{orgUuid}/subscriptions`.replace(`{${"orgUuid"}}`, encodeURIComponent(String(requestParameters.orgUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationSubscriptionRecordFromJSON));
    }

    /**
     */
    async organisationSubscriptionsControllerFindAll(requestParameters: OrganisationSubscriptionsControllerFindAllRequest): Promise<Array<OrganisationSubscriptionRecord>> {
        const response = await this.organisationSubscriptionsControllerFindAllRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationSubscriptionsControllerUpdateSubscriptionRaw(requestParameters: OrganisationSubscriptionsControllerUpdateSubscriptionRequest): Promise<runtime.ApiResponse<OrganisationSubscriptionRecord>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling organisationSubscriptionsControllerUpdateSubscription.');
        }

        if (requestParameters.orgUuid === null || requestParameters.orgUuid === undefined) {
            throw new runtime.RequiredError('orgUuid','Required parameter requestParameters.orgUuid was null or undefined when calling organisationSubscriptionsControllerUpdateSubscription.');
        }

        if (requestParameters.saveOrganisationSubscriptionRecordDto === null || requestParameters.saveOrganisationSubscriptionRecordDto === undefined) {
            throw new runtime.RequiredError('saveOrganisationSubscriptionRecordDto','Required parameter requestParameters.saveOrganisationSubscriptionRecordDto was null or undefined when calling organisationSubscriptionsControllerUpdateSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{orgUuid}/subscriptions/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))).replace(`{${"orgUuid"}}`, encodeURIComponent(String(requestParameters.orgUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SaveOrganisationSubscriptionRecordDtoToJSON(requestParameters.saveOrganisationSubscriptionRecordDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationSubscriptionRecordFromJSON(jsonValue));
    }

    /**
     */
    async organisationSubscriptionsControllerUpdateSubscription(requestParameters: OrganisationSubscriptionsControllerUpdateSubscriptionRequest): Promise<OrganisationSubscriptionRecord> {
        const response = await this.organisationSubscriptionsControllerUpdateSubscriptionRaw(requestParameters);
        return await response.value();
    }

}
