/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CourseMetaDto,
    CourseMetaDtoFromJSON,
    CourseMetaDtoToJSON,
} from '../models';

export interface CourseMetaControllerListAllProjectsRequest {
    productKey: string;
}

/**
 * ProjectMetaApi - interface
 * 
 * @export
 * @interface ProjectMetaApiInterface
 */
export interface ProjectMetaApiInterface {
    /**
     * 
     * @param {string} productKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMetaApiInterface
     */
    courseMetaControllerListAllProjectsRaw(requestParameters: CourseMetaControllerListAllProjectsRequest): Promise<runtime.ApiResponse<Array<CourseMetaDto>>>;

    /**
     */
    courseMetaControllerListAllProjects(requestParameters: CourseMetaControllerListAllProjectsRequest): Promise<Array<CourseMetaDto>>;

}

/**
 * 
 */
export class ProjectMetaApi extends runtime.BaseAPI implements ProjectMetaApiInterface {

    /**
     */
    async courseMetaControllerListAllProjectsRaw(requestParameters: CourseMetaControllerListAllProjectsRequest): Promise<runtime.ApiResponse<Array<CourseMetaDto>>> {
        if (requestParameters.productKey === null || requestParameters.productKey === undefined) {
            throw new runtime.RequiredError('productKey','Required parameter requestParameters.productKey was null or undefined when calling courseMetaControllerListAllProjects.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-meta/{productKey}`.replace(`{${"productKey"}}`, encodeURIComponent(String(requestParameters.productKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CourseMetaDtoFromJSON));
    }

    /**
     */
    async courseMetaControllerListAllProjects(requestParameters: CourseMetaControllerListAllProjectsRequest): Promise<Array<CourseMetaDto>> {
        const response = await this.courseMetaControllerListAllProjectsRaw(requestParameters);
        return await response.value();
    }

}
