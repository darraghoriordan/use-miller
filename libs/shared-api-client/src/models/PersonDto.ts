/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OrganisationMembership,
    OrganisationMembershipFromJSON,
    OrganisationMembershipFromJSONTyped,
    OrganisationMembershipToJSON,
} from './';

/**
 * 
 * @export
 * @interface PersonDto
 */
export interface PersonDto {
    /**
     * 
     * @type {boolean}
     * @memberof PersonDto
     */
    isSuper: boolean;
    /**
     * 
     * @type {number}
     * @memberof PersonDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    uuid: string;
    /**
     * 
     * @type {boolean}
     * @memberof PersonDto
     */
    emailVerified: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonDto
     */
    blocked: boolean;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    familyName?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    givenName?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    picture: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    auth0UserId: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    username?: string;
    /**
     * 
     * @type {Array<OrganisationMembership>}
     * @memberof PersonDto
     */
    memberships: Array<OrganisationMembership>;
    /**
     * 
     * @type {Date}
     * @memberof PersonDto
     */
    createdDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof PersonDto
     */
    updateDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof PersonDto
     */
    deletedDate: Date;
}

export function PersonDtoFromJSON(json: any): PersonDto {
    return PersonDtoFromJSONTyped(json, false);
}

export function PersonDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isSuper': json['isSuper'],
        'id': json['id'],
        'email': json['email'],
        'uuid': json['uuid'],
        'emailVerified': json['emailVerified'],
        'blocked': json['blocked'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'familyName': !exists(json, 'familyName') ? undefined : json['familyName'],
        'givenName': !exists(json, 'givenName') ? undefined : json['givenName'],
        'picture': json['picture'],
        'auth0UserId': json['auth0UserId'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'memberships': ((json['memberships'] as Array<any>).map(OrganisationMembershipFromJSON)),
        'createdDate': (new Date(json['createdDate'])),
        'updateDate': (new Date(json['updateDate'])),
        'deletedDate': (new Date(json['deletedDate'])),
    };
}

export function PersonDtoToJSON(value?: PersonDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'isSuper': value.isSuper,
        'id': value.id,
        'email': value.email,
        'uuid': value.uuid,
        'emailVerified': value.emailVerified,
        'blocked': value.blocked,
        'name': value.name,
        'familyName': value.familyName,
        'givenName': value.givenName,
        'picture': value.picture,
        'auth0UserId': value.auth0UserId,
        'username': value.username,
        'memberships': ((value.memberships as Array<any>).map(OrganisationMembershipToJSON)),
        'createdDate': (value.createdDate.toISOString()),
        'updateDate': (value.updateDate.toISOString()),
        'deletedDate': (value.deletedDate.toISOString()),
    };
}


