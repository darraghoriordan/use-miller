/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OrganisationMembership,
    OrganisationMembershipFromJSON,
    OrganisationMembershipFromJSONTyped,
    OrganisationMembershipToJSON,
} from './';

/**
 * 
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     * 
     * @type {number}
     * @memberof Invitation
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    givenName: string;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    emailAddress: string;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    notificationSent?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    expiresOn: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    acceptedOn?: Date;
    /**
     * 
     * @type {OrganisationMembership}
     * @memberof Invitation
     */
    organisationMembership: OrganisationMembership;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    createdDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    updateDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    deletedDate?: Date;
}

export function InvitationFromJSON(json: any): Invitation {
    return InvitationFromJSONTyped(json, false);
}

export function InvitationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invitation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'uuid': json['uuid'],
        'givenName': json['givenName'],
        'emailAddress': json['emailAddress'],
        'notificationSent': !exists(json, 'notificationSent') ? undefined : (new Date(json['notificationSent'])),
        'expiresOn': (new Date(json['expiresOn'])),
        'acceptedOn': !exists(json, 'acceptedOn') ? undefined : (new Date(json['acceptedOn'])),
        'organisationMembership': OrganisationMembershipFromJSON(json['organisationMembership']),
        'createdDate': (new Date(json['createdDate'])),
        'updateDate': (new Date(json['updateDate'])),
        'deletedDate': !exists(json, 'deletedDate') ? undefined : (new Date(json['deletedDate'])),
    };
}

export function InvitationToJSON(value?: Invitation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'uuid': value.uuid,
        'givenName': value.givenName,
        'emailAddress': value.emailAddress,
        'notificationSent': value.notificationSent === undefined ? undefined : (value.notificationSent.toISOString()),
        'expiresOn': (value.expiresOn.toISOString()),
        'acceptedOn': value.acceptedOn === undefined ? undefined : (value.acceptedOn.toISOString()),
        'organisationMembership': OrganisationMembershipToJSON(value.organisationMembership),
        'createdDate': (value.createdDate.toISOString()),
        'updateDate': (value.updateDate.toISOString()),
        'deletedDate': value.deletedDate === undefined ? undefined : (value.deletedDate.toISOString()),
    };
}


