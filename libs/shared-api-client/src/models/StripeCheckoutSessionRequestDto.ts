/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    StripeCheckoutLineItem,
    StripeCheckoutLineItemFromJSON,
    StripeCheckoutLineItemFromJSONTyped,
    StripeCheckoutLineItemToJSON,
} from './';

/**
 * 
 * @export
 * @interface StripeCheckoutSessionRequestDto
 */
export interface StripeCheckoutSessionRequestDto {
    /**
     * 
     * @type {string}
     * @memberof StripeCheckoutSessionRequestDto
     */
    clientReferenceId?: string;
    /**
     * 
     * @type {Array<StripeCheckoutLineItem>}
     * @memberof StripeCheckoutSessionRequestDto
     */
    lineItems: Array<StripeCheckoutLineItem>;
    /**
     * 
     * @type {string}
     * @memberof StripeCheckoutSessionRequestDto
     */
    mode: string;
    /**
     * The URL to which Stripe should redirect the customer after payment. This is appended to the host configured in the StripeClientConfigurationService
     * @type {string}
     * @memberof StripeCheckoutSessionRequestDto
     */
    successFrontendPath: string;
    /**
     * The URL to which Stripe should redirect the customer after payment cancellation. This is appended to the host configured in the StripeClientConfigurationService
     * @type {string}
     * @memberof StripeCheckoutSessionRequestDto
     */
    cancelFrontendPath?: string;
}

export function StripeCheckoutSessionRequestDtoFromJSON(json: any): StripeCheckoutSessionRequestDto {
    return StripeCheckoutSessionRequestDtoFromJSONTyped(json, false);
}

export function StripeCheckoutSessionRequestDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): StripeCheckoutSessionRequestDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'clientReferenceId': !exists(json, 'clientReferenceId') ? undefined : json['clientReferenceId'],
        'lineItems': ((json['lineItems'] as Array<any>).map(StripeCheckoutLineItemFromJSON)),
        'mode': json['mode'],
        'successFrontendPath': json['successFrontendPath'],
        'cancelFrontendPath': !exists(json, 'cancelFrontendPath') ? undefined : json['cancelFrontendPath'],
    };
}

export function StripeCheckoutSessionRequestDtoToJSON(value?: StripeCheckoutSessionRequestDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'clientReferenceId': value.clientReferenceId,
        'lineItems': ((value.lineItems as Array<any>).map(StripeCheckoutLineItemToJSON)),
        'mode': value.mode,
        'successFrontendPath': value.successFrontendPath,
        'cancelFrontendPath': value.cancelFrontendPath,
    };
}


