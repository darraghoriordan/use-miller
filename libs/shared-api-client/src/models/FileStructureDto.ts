/* tslint:disable */
/* eslint-disable */
/**
 * Use Miller BE
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FileStructureDto
 */
export interface FileStructureDto {
    /**
     * 
     * @type {string}
     * @memberof FileStructureDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof FileStructureDto
     */
    type: FileStructureDtoTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof FileStructureDto
     */
    isOpen?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FileStructureDto
     */
    fileLocation: string;
    /**
     * 
     * @type {Array<FileStructureDto>}
     * @memberof FileStructureDto
     */
    children?: Array<FileStructureDto>;
}

/**
* @export
* @enum {string}
*/
export enum FileStructureDtoTypeEnum {
    folder = 'folder',
    file = 'file'
}

export function FileStructureDtoFromJSON(json: any): FileStructureDto {
    return FileStructureDtoFromJSONTyped(json, false);
}

export function FileStructureDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileStructureDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'isOpen': !exists(json, 'isOpen') ? undefined : json['isOpen'],
        'fileLocation': json['fileLocation'],
        'children': !exists(json, 'children') ? undefined : ((json['children'] as Array<any>).map(FileStructureDtoFromJSON)),
    };
}

export function FileStructureDtoToJSON(value?: FileStructureDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': value.type,
        'isOpen': value.isOpen,
        'fileLocation': value.fileLocation,
        'children': value.children === undefined ? undefined : ((value.children as Array<any>).map(FileStructureDtoToJSON)),
    };
}


